${-}{-}\ \Sigma\ \mathsf{allocates\ both\ ends\ of\ a\ channel\ (appending\ \_r\ and\ \_w\ by\ default\ if\ a\ pair\ is\ not\ given).}$
$\Sigma\ \mathsf{z2s, s2z, z2a, a2z, s2a, a2z, a2r, r2z, (\_,out)}$ .
  ${-}{-}\ \sigma\ \mathsf{distributes\ session\ channels.\ In\ particular, read\ ends\ distributed\ linearly}$ .
  let Z = $\sigma$ z2s_w, z2a_w, out, a2z_r, r2z_r, s2z_r.
    let handle_unit = ($\lambda$ v . match v with
			 | () when $\bullet =>$ wr ('Input, $\bullet$) $->$ z2s_w
			 | () when $\bullet =>$ wr 'Tick $->$ z2a_w
			 | () when $\bullet =>$ wr ($\bullet$ :: bit) out) in
    let loop1 = loop s2z_r handle_unit in
    ${-}{-}\ \mathsf{unit\ handled\ in\ the\ same\ way\ for\ brevity}$.
    let loop2 = loop a2z_r handle_unit in
    let loop3 = loop r2z_r ($\lambda$ v . match v with
                             | v when $\bullet =>$ wr ('Input, $\bullet$) $->$ z2s_w
                             | v when $\bullet =>$ wr 'Tick $->$ z2a_w
			     | v when $\bullet =>$ wr ($\bullet$ :: bit) out) in
    loop1 $*&&$ loop2 $*&&$ loop3
    

  let A = loop _2a ($\lambda$ v . match v with
		      | ('Send, Sid, Rid, m) $=>$ if $\bullet$
					   $\,$then wr 'Ok $\qquad\qquad\,->$ a2s
					   $\,$else $\;$wr ('Sent, Sid, m) $->$ a2r
		      | 'Tick $\qquad\qquad\quad\;\;\:=>$ if $\bullet$
					   $\,$then wr () $\qquad\qquad\;\;\;\,->$ a2z
					   $\,$else $\;$wr ('Sent, Sid, m) $->$ a2r)

  let S = loop _2s ($\lambda$ v . match v with
		      | ('Input, m) $=>$ wr ('Send, Sid, Rid, m) $->$ s2a
		      | 'Ok $\qquad\;\;\;=>$ wr () $\qquad\qquad\qquad\quad\,->$ s2z)

  let R = loop a2r ($\lambda$ v . wr v $->$ r2z)
