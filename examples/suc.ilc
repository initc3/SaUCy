{- Static corruptions: Either P is corrupted, Q is corrupted, or neither are
   corrupted. -}
data Crupt = CruptP | CruptQ | CruptNone

let advWrapper p = error "todo"

{- The dummy adversary forwards messages between Z and F (and vice versa). -}
let dummyAdversary crupt frZ toZ frF toF =
    loop frZ !(lam x . wr x -> toF)
  |> loop frF !(lam x . wr x -> toZ)

{- The ideal protocol forwards messages between Z and F (and vice versa). -}
let idealProtocol rZ2P wP2F rZ2Q wQ2F rF2P wP2Z rF2Q wQ2Z =
    loop rZ2P !(lam x . wr x -> wP2F)
  |> loop rZ2Q !(lam x . wr x -> wQ2F)
  |> loop rF2P !(lam x . wr x -> wP2Z)
  |> loop rF2Q !(lam x . wr x -> wQ2Z)

let testEnv toExec' frP frQ frA =
  let! toExec = toExec' in
    wr CruptP -> toExec
    |> loop frP !(lam x . print x)
    |> loop frQ !(lam x . print x)
    |> loop frA !(lam x . print x)    

{- UC communication layout
   Z --- P/Q
   |  X  |
   A --- F
 -}

let execUC z p q f a =
  nu (rZ2P, wZ2P), (rP2Z, wP2Z)
  , (rZ2Q, wZ2Q), (rQ2Z, wQ2Z)
  , (rP2F, wP2F), (rF2P, wF2P)
  , (rQ2F, wQ2F), (rF2Q, wF2Q)
  , (rF2A, wF2A), (rA2F, wA2F)
  , (rA2Z, wA2Z), (rZ2A, wZ2A)
  , (rZ2E, wZ2E)
  . let (crupt', rZ2E) = rd rZ2E in
    let! crupt = crupt' in
        f crupt
      |> a crupt rZ2A !wA2Z rF2A
      {-|> if crupt == CruptP then advWrapper p else p ()
      |> if crupt == CruptQ then advWrapper q else q ()-}
      |> z !wZ2E