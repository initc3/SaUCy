{- UC experiment -}

{- Static corruptions: Either P is corrupted, Q is corrupted, or neither are
   corrupted. -}
data SttCrupt = SttCrupt (String, String) Crupt
data Crupt = CruptP | CruptQ | CruptNone

{- If P is corrupted, then Z shouldn't be able to write to P, messages from F
are forwarded to A, and messages from A are forwarded to F. Otherwise, spawn P
as normal. -}
let partyWrapper p crupt toZ frZ toF frF toA frA =
  let! crupt' = crupt in
  let! toZ' = toZ in  
  let! toA' = toA in
  let! toF' = toF in
    if crupt' then
        print "Crupted" ;
        loop frZ !(lam _ . error "fail")
      |> loop frF !(lam x . wr x -> toA')
      |> loop frA !(lam x . wr x -> toF')
    else
      print "Not crupted" ;
      p toZ frZ toF frF

{- The dummy adversary forwards messages between Z and F (and vice versa). -}
{- TODO: Using unpacked write channel should not type check -}
let dummyAdversary crupt toZ frZ toF frF toP frP toQ frQ =
  let! crupt' = crupt in
  let! toF' = toF in
  let! toZ' = toZ in
    loop frZ !(lam x . wr x -> toF')
  |> loop frF !(lam x . wr x -> toZ')
  |> loop frP !(lam x . wr x -> toZ')
  |> loop frQ !(lam x . wr x -> toZ')

{- The dummy party forwards messages between Z and F (and vice versa). Flipped
argument order for type inference w/o annotations. Fix later. -}
let dummyParty toZ frZ toF frF  =
  let! toF' = toF in
  let! toZ' = toZ in
      loop frZ !(lam x . wr x -> toF')
    |> loop frF !(lam x . wr x -> toZ')

let dummyFunctionality crupt toP frP toQ frQ toA frA =
  let! crupt' = crupt in
  let! toP' = toP in
  let! toQ' = toQ in
  let! toA' = toA in
      loop frP !(lam x . wr x -> toP')
    |> loop frQ !(lam x . wr x -> toQ')
    |> loop frA !(lam x . wr x -> toA')

{- z !wZ2E rP2Z !wZ2P rQ2Z !wZ2Q rA2Z !wZ2A -}
let testEnv toExec frP toP frQ toQ frA toA =
  let! toExec' = toExec in
  let! toP' = toP in
  let! toQ' = toQ in
  let! toA' = toA in
    wr (SttCrupt ("sid1","") CruptNone) -> toExec'
    |> loop frP !(lam x . print ("P sent: " ++ x))
    |> loop frQ !(lam x . print ("Q sent: " ++ x))
    |> loop frA !(lam x . print ("A sent: " ++ x) ; print "Env output 1")

{- UC communication layout
   Z --- P/Q
   |  X  |
   A --- F
 -}

let execUC z p q f a =
  nu (rZ2P, wZ2P), (rP2Z, wP2Z)
  , (rZ2Q, wZ2Q), (rQ2Z, wQ2Z)
  , (rP2F, wP2F), (rF2P, wF2P)
  , (rQ2F, wQ2F), (rF2Q, wF2Q)
  , (rF2A, wF2A), (rA2F, wA2F)
  , (rA2Z, wA2Z), (rZ2A, wZ2A)
  {- Party wrapper channels -}
  , (rP2A, wP2A), (rA2P, wA2P)
  , (rQ2A, wQ2A), (rA2Q, wA2Q)
  {- Z to execution channels -}
  , (rZ2E, wZ2E)
  . print "Starting" ;
    (let (msg, rZ2E) = rd rZ2E in
     print "Received msg from Z" ;
     let! (SttCrupt sid crupt) = msg in
        print "Spawn f" ; f !crupt !wF2P rP2F !wF2Q rQ2F !wF2A rA2F
      |> print "Spawn a" ; a !crupt !wA2Z rZ2A !wA2F rF2A !wA2P rP2A !wA2Q rQ2A
      |> print "Spawn p" ; partyWrapper p !(crupt == CruptP) !wP2Z rZ2P !wP2F rF2P !wP2A rA2P
      |> print "Spawn q" ; partyWrapper q !(crupt == CruptQ) !wQ2Z rZ2Q !wQ2F rF2Q !wQ2A rA2Q)
    |> print "Spawn z" ; z !wZ2E rP2Z !wZ2P rQ2Z !wZ2Q rA2Z !wZ2A

let testExec () = execUC testEnv dummyParty dummyParty dummyFunctionality dummyAdversary